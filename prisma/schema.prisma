// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    // output   = "generated"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                    String                 @id @default(cuid())
    username              String?
    bio                   String?
    email                 String?                @unique
    emailVerified         DateTime?
    image                 String?
    backgroundImage       String?
    password              String?
    role                  UserRole               @default(USER)
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @default(now())
    twoFactorConfirmation TwoFactorConfirmation?
    Organization          Organization[]

    @@unique([id])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum UserRole {
    ADMIN
    USER
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Organization {
    id          String   @id @default(cuid())
    name        String
    url         String?
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([id])
}

model Link {
    id          String   @id @default(cuid())
    title       String
    description String?
    url         String
    isPublic    Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Subscriber {
    id                   String   @id @default(cuid())
    name                 String
    email                String   @unique
    agreedToSubscription Boolean  @default(false)
    confirmed            Boolean  @default(false)
    confirmationToken    String?  @unique
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
}
